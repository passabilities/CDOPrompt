#!/usr/bin/env node
'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

require('babel-polyfill');

var solc = require('solc');
var fs = require('fs');
var path = require('path');
var mkdirp = require('mkdirp');
var cli = require('cli').enable('status', 'glob');

cli.parse({
    'out-dir': [false, 'Output directory for the compiled contracts', 'path', './contracts'],
    optimise: [false, 'If present activate the solc optimiser']
});

cli.main(function (args, _ref) {
    var outputDirectory = _ref['out-dir'];
    var optimise = _ref.optimise;

    cli.debug('out-dir: ' + outputDirectory);
    cli.debug('args: ' + args);

    if (optimise) {
        cli.debug('solc optimiser enabled');
    }

    if (args.length === 0) {
        cli.fatal('a file is required');
    }

    var currentPath = process.cwd();

    cli.debug('currentPath: ' + currentPath);

    var sources = {};

    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
        for (var _iterator = args[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var fileName = _step.value;

            cli.debug('loading ' + fileName);

            var baseName = path.basename(fileName);
            var filePath = path.join(currentPath, fileName);
            var file = fs.readFileSync(filePath, 'utf8');

            sources[baseName] = file;

            cli.debug('finished loading ' + fileName);
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
            }
        } finally {
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }

    var outputDirectoryPath = path.join(currentPath, outputDirectory);

    cli.debug('out-dir-path ' + outputDirectoryPath);

    mkdirp.sync(outputDirectoryPath);

    cli.debug('out-dir created (or it already existed)');

    cli.debug('compiling contracts');

    var compiledContracts = solc.compile({ sources: sources }, optimise);

    cli.debug('finished compiling contracts');

    if (compiledContracts.errors) {
        throw compiledContracts.errors;
    }

    cli.debug('compiled without any errors');

    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
        for (var _iterator2 = Object.entries(compiledContracts.contracts)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var _step2$value = _slicedToArray(_step2.value, 2);

            var key = _step2$value[0];
            var value = _step2$value[1];

            cli.debug('creating ' + key + '.bin and ' + key + '.abi');

            fs.writeFile(path.join(outputDirectoryPath, key + '.bin'), value.bytecode);
            fs.writeFile(path.join(outputDirectoryPath, key + '.abi'), value.interface);

            cli.debug('finished creating ' + key + '.bin and ' + key + '.abi');
        }
    } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion2 && _iterator2.return) {
                _iterator2.return();
            }
        } finally {
            if (_didIteratorError2) {
                throw _iteratorError2;
            }
        }
    }
});